// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Widget {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
}

model Loan {
  id                BigInt                 @id @default(autoincrement())
  borrowerName      String              @db.String(255)
  pipelineStage     PipelineStage       @default(PROSPECT)
  loanAmount        Int?
  transactionType   TransactionType?
  referralSource    String?             @db.String(255)
  borrowerEmail     String?             @db.String(255)
  propertyAddress   String?             @db.String(255)
  borrowerPhone     String?             @db.String(50)
  purchasePrice     Int?
  creditScore       Int?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  activityLog       ActivityLog[]       @relation("ActivityLogToLoan")
  fileNotes         FileNotes[]         @relation("FileNotesToLoan")
  DocumentChecklist DocumentChecklist[] @relation("DocumentChecklistToLoan")
  TaskList          TaskList[]          @relation("TaskListToLoan")
  loanTeamId        BigInt
  loanTeam          LoanTeam            @relation(fields: [loanTeamId], references: [id])
}

enum TransactionType {
  PURCHASE
  REFINANCE
}

enum PipelineStage {
  PROSPECT
  APPLICATION
  PROCESSING
  UNDERWRITING
  CONDITIONAL
  CLOSED
}

model ActivityLog {
  id        BigInt      @id @default(autoincrement())
  loanId    BigInt
  loan      Loan     @relation("ActivityLogToLoan", fields: [loanId], references: [id], onDelete: Cascade)
  message   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// The @relation directive in the ActivityLog model establishes the relationship between the two models. The fields: [loanId] part indicates that the loanId field in the ActivityLog model is used to connect it to the Loan model. The references: [id] part indicates that the loanId field in the ActivityLog model corresponds to the id field in the Loan model.

model FileNotes {
  id        BigInt      @id @default(autoincrement())
  loanId    BigInt
  loan      Loan     @relation("FileNotesToLoan", fields: [loanId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  note      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  important Boolean? @default(false)
}

model DocumentChecklist {
  id           BigInt            @id @default(autoincrement())
  loanId       BigInt
  loan         Loan           @relation("DocumentChecklistToLoan", fields: [loanId], references: [id], onDelete: Cascade)
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  documentName String
  dueDate      DateTime?
  important    Boolean?       @default(false)
  status       DocumentStatus @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

enum DocumentStatus {
  RECEIVED
  REQUESTED
  PENDING
}

model TaskList {
  id          BigInt           @id @default(autoincrement())
  loanId      BigInt
  loan        Loan          @relation("TaskListToLoan", fields: [loanId], references: [id], onDelete: Cascade)
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  title       String        @db.String(255)
  description String?       @db.String(2000)
  dueDate     DateTime?
  important   Boolean?      @default(false)
  status      TaskStatus    @default(NOT_STARTED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  taskUpdates TaskUpdates[] @relation("TaskListToTaskUpdates")
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING
  COMPLETED
}

model TaskUpdates {
  id         BigInt      @id @default(autoincrement())
  taskListId BigInt
  important  Boolean? @default(false)
  taskList   TaskList @relation("TaskListToTaskUpdates", fields: [taskListId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                     String              @id @default(cuid())
  name                   String?
  email                  String?             @unique
  emailVerified          DateTime?           @map("email_verified")
  hashedPassword         String?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  authoredActivities     ActivityLog[]
  authoredTasks          TaskList[]
  authoredTaskUpdates    TaskUpdates[]
  authoredFileNotes      FileNotes[]
  authoredChecklistItems DocumentChecklist[]
  teamMemberships        LoanTeamMember[]
  firstTimeLogin         Boolean             @default(true)
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model LoanTeam {
  id               BigInt               @id @default(autoincrement())
  teamName         String            @unique @db.String(255)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  loanTeamRequests LoanTeamRequest[]
  teamMembers      LoanTeamMember[]
  loans            Loan[]
}

model LoanTeamMember {
  id         BigInt      @id @default(autoincrement())
  loanTeamId BigInt
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  loanTeam   LoanTeam @relation(fields: [loanTeamId], references: [id])
  User       User     @relation(fields: [userId], references: [id])
}

// The LoanTeamMember model is acting as a bridge between the LoanTeam and User models, enabling the many-to-many relationship between them. The LoanTeamMember model is often referred to as a "junction table" or "linking table" because it links the LoanTeam and User models together, it has a one to many relationship with both the LoanTeam and User models.

// In a many-to-many relationship, one User can belong to many LoanTeams, and one LoanTeam can have many Users. This is achieved by having a separate LoanTeamMember record for each combination of User and LoanTeam.

// So, if a User belongs to two LoanTeams, there would be two LoanTeamMember records for that User, each with a different loanTeamId. Similarly, if a LoanTeam has two Users, there would be two LoanTeamMember records for that LoanTeam, each with a different userId.

// This structure allows you to query all the LoanTeams that a User belongs to, all the Users that belong to a LoanTeam, or all the LoanTeamMember records, which would give you all combinations of Users and LoanTeams.

model LoanTeamRequest {
  id          BigInt                   @id @default(autoincrement())
  requestorId String
  requesteeId String
  loanTeam    LoanTeam              @relation(fields: [loanTeamId], references: [id])
  loanTeamId  BigInt
  status      LoanTeamRequestStatus @default(PENDING)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
}

enum LoanTeamRequestStatus {
  PENDING
  ACCEPTED
  CONFIRMED
  REJECTED
}
