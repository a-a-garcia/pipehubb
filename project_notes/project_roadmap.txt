CORE
+ Create a loan
+ View loans
+ Update loans
+ Delete loans
+ Kanban style, ability to drag and drop loans
+ clicking on a loan shows loan details, and activity log, tasks and file notes

ADVANCED
+ User Authentication 
    - Google 
    - Credentials 
+ Pagination (?)
+ Dashboard 
    - Graph displaying amount of loans in each stage
    - Fetch latest loans
        - Interacted with, or recently created
    - Summary card 
        - amount of loans in each stage
+ Color customization by user
+ AI chat WebSocket
+ Ability to create loan teams 
    - Designate users as loan officer or sales support














Ideas Space
- How will this be differentiated from HubSpot ? 
    Less feature overload/catered to loan officers/loan support team, but how? Think about it...

1.0 Features

1. Create a loan
    - Either
        A) Separate forms for purchase and refi
        B) Certain forms will be disabled depending on what type of transaction is selected.
2. View (Read) a loan
3. Update a loan on the view loan page.
4. Each loan will have an acitivies page showing all activities
5. Each loan, on creation, automatically goes into prospect stage.
6. On the dashboard, loans must be able to be moved to any stage that user wishes - activity log will update accordingly.
7. Each loan should have a task log that can be added to. An alert will flash on the view loan page if there is a task that has at least one task that's marked as highly important
9. Activities should automatically trigger the creation of a log in the activity log 
    1 - Creation of a loan.
    2 - Update of a loan.

Tasks
___
1.Tasks should have the ability to marked as highly important which will trigger an alert on the Activity page 


Backlog
___
Tasks
1. Add more functionality than just ability to mark task as complete, specifically ability to create a "log" for that specific task. Useful if task is something like "call client to discuss rate lock", but LO was not able to get ahold of client. Need to figure out subtasks.
2. Store completed tasks in history somewhere (in 1.0, tasks will just be deleted if they are marked as complete)

WebSocket
1. Add an AI Chatbot or Web Socket of some support

Login / Registration
1. IMPORTANT as this is supposed to be for TEAMS so it must be able to be logged in by multiple people. Loan Teams must be able to be created
    On register, user must select whether they are a Loan Officer or Sales Support. Important as only loan team members should be able to access specific loan team's loans.

Deployment

SEO consideration

____

Debugging

1. Bug: Tailwind class will not apply for pipeline stage color.

* You cannot apply tailwind classes with something like

    <Heading
        className={classNames(`!bg-${stage.color}`....)}
        size={"4"}
    >

string interpolation doesn't work for applying tailwind dynamically
You can try using the style object instead....


2. Bug: Changing default font did not work via radix UI docs or nextjs docs

* Fix - look at layout.tsx

    import "./theme-config.css";
    import { Inter } from 'next/font/google';
    import "./globals.css";

    ...
    <body className={inter.variable}>
    ...

    - create a theme-config.css file in /app

    ".radix-themes {
    --default-font-family: var(--font-inter) !important
    }"

3. Bug: Could not submit form when building it with react-hook-form

* Fix - You cannot directly nest <Select> or <TextField> or any Radix Ui Theme component directly and give it {...register("borrowerName")} etc prop to track the input. you must use the <Controller> component and it's render prop in order for the input to properly be tracked. 

4. "Cannot read properties of undefined (reading 'trim')"

* Fix if you are using the .trim() method (which i am on the create and edit loan validation schema,) you must do `...: undefined` as you must account for undefined/since .trim() can't work on an empty value like undefined


5. loanAmount field seemingly was required even though i didnt use `required` - the real issue was that it was treating the input as empty or invalid(?) because there was a type mismatch between number/string

* Fix - react-hook-form TREATS EVERYTHING AS A STRING so if your input is of type number, you must cast the input into a number on submission

if using a normal input

<input
  type="number"
  {...register("test", {
    valueAsNumber: true,
  })}
/>

Using a standard function in this case because we are using <Controller> components

                            onChange={(e) => {
                              const value = e.target.value;
                              field.onChange(
                                value ? parseInt(value) : undefined
                              );
                            }}

Additionally, a custom function had to be applied to each and every field 


onChange={(e) => {
                              const value = e.target.value;
                              field.onChange(
                                value ? parseInt(value) : undefined
                              );

Otherwise, adding stuff to an input and then deleting it, then trying to submit the form will result in failure to submit the form