CORE
+ Create a loan
+ View loans
+ Update loans
+ Delete loans
+ Kanban style, ability to drag and drop loans
+ clicking on a loan shows loan details, and activity log, tasks and file notes

ADVANCED
+ User Authentication 
    - Google 
    - Credentials 
+ Pagination (?)
+ Dashboard 
    - Graph displaying amount of loans in each stage
    - Fetch latest loans
        - Interacted with, or recently created
    - Summary card 
        - amount of loans in each stage
+ Color customization by user
+ AI chat WebSocket
+ Ability to create loan teams 
    - Designate users as loan officer or sales support














Ideas Space
- How will this be differentiated from HubSpot ? 
    Less feature overload/catered to loan officers/loan support team, but how? Think about it...

1.0 Features

1. Create a loan
    - Either
        A) Separate forms for purchase and refi
        B) Certain forms will be disabled depending on what type of transaction is selected.
2. View (Read) a loan
3. Update a loan on the view loan page.
4. Each loan will have an acitivies page showing all activities
5. Each loan, on creation, automatically goes into prospect stage.
6. On the dashboard, loans must be able to be moved to any stage that user wishes - activity log will update accordingly.
7. Each loan should have a task log that can be added to. An alert will flash on the view loan page if there is a task that has at least one task that's marked as highly important
9. Activities should automatically trigger the creation of a log in the activity log 
    1 - Creation of a loan.
    2 - Update of a loan.

Tasks
___
1.Tasks should have the ability to marked as highly important which will trigger an alert on the Activity page 


Backlog
___
Tasks
1. Add more functionality than just ability to mark task as complete, specifically ability to create a "log" for that specific task. Useful if task is something like "call client to discuss rate lock", but LO was not able to get ahold of client. Need to figure out subtasks.
2. Store completed tasks in history somewhere (in 1.0, tasks will just be deleted if they are marked as complete)

WebSocket
1. Add an AI Chatbot or Web Socket of some support

Login / Registration
1. IMPORTANT as this is supposed to be for TEAMS so it must be able to be logged in by multiple people. Loan Teams must be able to be created
    On register, user must select whether they are a Loan Officer or Sales Support. Important as only loan team members should be able to access specific loan team's loans.

Deployment

SEO consideration

____

Debugging

1. Bug: Tailwind class will not apply for pipeline stage color.

* You cannot apply tailwind classes with something like

    <Heading
        className={classNames(`!bg-${stage.color}`....)}
        size={"4"}
    >

string interpolation doesn't work for applying tailwind dynamically
You can try using the style object instead....


2. Bug: Changing default font did not work via radix UI docs or nextjs docs

* Fix - look at layout.tsx

    import "./theme-config.css";
    import { Inter } from 'next/font/google';
    import "./globals.css";

    ...
    <body className={inter.variable}>
    ...

    - create a theme-config.css file in /app

    ".radix-themes {
    --default-font-family: var(--font-inter) !important
    }"

3. Bug: Could not submit form when building it with react-hook-form

* Fix - You cannot directly nest <Select> or <TextField> or any Radix Ui Theme component directly and give it {...register("borrowerName")} etc prop to track the input. you must use the <Controller> component and it's render prop in order for the input to properly be tracked. 

4. "Cannot read properties of undefined (reading 'trim')"

* Fix if you are using the .trim() method (which i am on the create and edit loan validation schema,) you must do `...: undefined` as you must account for undefined/since .trim() can't work on an empty value like undefined


5. loanAmount field seemingly was required even though i didnt use `required` - the real issue was that it was treating the input as empty or invalid(?) because there was a type mismatch between number/string

* Fix - react-hook-form TREATS EVERYTHING AS A STRING so if your input is of type number, you must cast the input into a number on submission

if using a normal input

<input
  type="number"
  {...register("test", {
    valueAsNumber: true,
  })}
/>

Using a standard function in this case because we are using <Controller> components

                            onChange={(e) => {
                              const value = e.target.value;
                              field.onChange(
                                value ? parseInt(value) : undefined
                              );
                            }}

Additionally, a custom function had to be applied to each and every field 


onChange={(e) => {
                              const value = e.target.value;
                              field.onChange(
                                value ? parseInt(value) : undefined
                              );

Otherwise, adding stuff to an input and then deleting it, then trying to submit the form will result in failure to submit the form

6. " pipelineStages.forEach(stage => {
            loansByStage[stage] = loans.filter(loan => loan.pipelineStage === stage)
        })
        

    error: 
    Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{}'.
  No index signature with a parameter of type 'string' was found on type '{}'.ts(7053)
        "

    Fix: type loansByStage like so:
    
     const loansByStage: {[key: string]: any} = {};

     why?

     The syntax you see here is called an index signature in TypeScript. It is used to define the types of properties that can be accessed using square bracket notation on an object.

In this specific code snippet, the index signature is added to the loansByStage object. The index signature is defined as [key: string]: any. Let's break it down:

[key: string] represents the index parameter. It specifies that any string can be used as the key to access properties of the object.
: any is the type annotation for the value associated with the key. In this case, it is set to any, which means that the value can be of any type.
So, by adding this index signature, you are essentially saying that the loansByStage object can have properties with any string key and any corresponding value type.

7. "Element implicitly has an 'any' type because index expression is not of type 'number'. "

on line "loans[data.value]" in pipeline/page.tsx

 Prisma does generate TypeScript types based on your database schema. However, the error you're seeing is not related to the shape of the Loan object, but rather the shape of the loans object (the object you get when you call the API to get all loans).

In your code, you're using data.value as an index to access a property of loans. TypeScript needs to know that loans is an object with string keys and Loan[] values.

Since loans is set with the data fetched from your API, you can type the state like this:

const [loans, setLoans] = useState<Record<string, Loan[]>>({});

This tells TypeScript that loans is an object with string keys and values that are arrays of Loan objects. Now, when you use data.value as an index to access a property of loans, TypeScript knows that it's a string and the error should be resolved.

8. @loans/[id]/page.tsx: "((loanKey) => {
                return (
                    <Card>
                        {loanKey}
                        {loan[loanKey]!}
                    </Card>
                )
              })}"
    
    Error: "Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{ id: number; borrowerName: string; pipelineStage: PipelineStage; loanAmount: number | null; transactionType: TransactionType | null; referralSource: string | null; ... 6 more ...; updatedAt: Date; }'.
  No index signature with a parameter of type 'string' was found on type '{ id: number; borrowerName: string; pipelineStage: PipelineStage; loanAmount: number | null; transactionType: TransactionType | null; referralSource: string | null; ... 6 more ...; updatedAt: Date; }'.ts(7053)"

9. @loans/[id]/page.tsx: What does `keyof typeof loan` mean?

loan[loanKey as keyof typeof loan];

The keyof keyword in TypeScript is used to create a type representing the keys of an object.

When you use keyof typeof loan, you're doing two things:

typeof loan: This gets the type of the loan object.
keyof typeof loan: This gets the keys of the type of the loan object.
So, keyof typeof loan is a type that represents the keys of the loan object. For example, if loan is an object like { id: 1, name: 'Loan 1' }, then keyof typeof loan would be a type that could be either 'id' or 'name'.

This is useful when you want to ensure that a variable can only be one of the keys of a specific object. In your code, loanKey is being used as a key to access a value from the loan object, so it makes sense to type it as keyof typeof loan to ensure that it can only be a key that exists on the loan object.

10. @loans/[id]/page.tsx: Type 'string | Date | null' is not assignable to type 'ReactNode'.
  Type 'Date' is not assignable to type 'ReactNode'.ts(2322)

  Solved with creating a separate variable `rawValue`

  The code you've shared is attempting to handle different types of values that might be present in the loan object. It's using a rawValue variable to hold the original value from the loan object, and a value variable to hold the processed value that will be used in the React component.

The value variable is declared as string | number | null, which means it can hold a string, a number, or null. However, when used in a React component, the value needs to be a ReactNode, which can be a string, a number, a boolean, null, undefined, or a React element.

The error Type 'string | Date | null' is not assignable to type 'ReactNode'. Type 'Date' is not assignable to type 'ReactNode'.ts(2322) is occurring because at some point in your code, you're trying to assign a Date object to a variable or property that should be a ReactNode. Date objects are not valid ReactNode values.

In the code you've shared, the value variable is correctly converted to a string when loanKey is "createdAt" or "updatedAt". If rawValue is an instance of Date and loanKey is not "createdAt" or "updatedAt", an error is thrown. In all other cases, rawValue is assigned to value directly.

11. Could not get activity on creation of loan with this code

```
 const submitForm = handleSubmit(async (data) => {
    try {
      setIsSubmitting(true);
      const newLoan = await axios.post("/api/loans", data);
      setNewlyCreatedLoan(newLoan.data);
      loanCreationActivity();
      router.push("/loans/pipeline");
    } catch {
      console.error("Failed to create loan");
      setValidationErrors("Failed to create loan");
    }
  });

  const loanCreationActivity = async () => {
    try {
      if (newlyCreatedLoan) {
        await axios.post("/api/activitylog", {
          loanId: newlyCreatedLoan.id,
          message: `USER created a new loan for new borrower ${newlyCreatedLoan.borrowerName}.`,
        });
        console.log('SUCCESS: Created activity log for loan creation')
      }
      router.push("/loans/pipeline");
    } catch {
      console.error("Failed to create activity log for loan creation");
      setValidationErrors("Failed to create activity log for loan creation");
    }
  };
  ```

Solution: The loanCreationActivity function is called immediately after the axios.post request to create a new loan, but this doesn't necessarily mean that the newLoan data has been set in the state. The setNewlyCreatedLoan function updates the state asynchronously, which means there might be a delay before the new state is available.

One way to ensure that loanCreationActivity has the data it needs is to pass the newLoan data directly to it, rather than relying on the state.

12. Breakdown of how DocumentChecklist (parent) and StatusDropdown (child) work to dynamically update `status` and display to the user

DocumentChecklist.tsx:

This component receives a loan object as a prop.
It maintains a state documentChecklist which is initially set to null.
It defines a function fetchDocumentChecklist that takes a loanId as a parameter, fetches data from an API endpoint using the loanId, and sets the documentChecklist state with the returned data.
In the useEffect hook, it checks if documentChecklist is null and if so, it calls fetchDocumentChecklist with the loan.id as a parameter. This useEffect hook runs once when the component mounts because its dependency array is empty.
It passes the fetchDocumentChecklist function as a prop to the StatusDropdown component.

StatusDropdown.tsx:

This component receives an item object and the fetchDocumentChecklist function as props.
It maintains a state status which is initially set to item.status.
In the useEffect hook, it calls fetchDocumentChecklist with item.loanId as a parameter whenever status changes.
It defines a function handleChange that takes a value as a parameter, makes a PATCH request to an API endpoint with item.id and value, and sets the status state with the value.
In summary, DocumentChecklist.tsx fetches a list of documents when it mounts and passes a function to fetch the document checklist to StatusDropdown.tsx. StatusDropdown.tsx uses this function to fetch the document checklist whenever the status changes. It also updates the status of a specific document in the checklist when the dropdown value changes.